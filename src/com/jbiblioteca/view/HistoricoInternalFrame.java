/*
 * The MIT License
 *
 * Copyright 2017 Dewes.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.jbiblioteca.view;

import com.jbiblioteca.controller.EmprestimoController;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Dewes
 */
public class HistoricoInternalFrame extends javax.swing.JInternalFrame {

    MainFrame mainFrame;
    
    public HistoricoInternalFrame( MainFrame mainFrame ) {
        initComponents();
        this.mainFrame = mainFrame;
        updateHistoricoTable();
        apagarHistoricoBtn.setEnabled(false);
        
        /*
        this.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                super.componentResized(e);
                final int resizedPageSize = 
                        (int) (historicoTable.getParent().getSize().getHeight() / historicoTable.getRowHeight());
                System.out.println("resized " + resizedPageSize);
            }
            
        });
        */

        /*
        historicoTable.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
            int idx[] = historicoTable.getSelectedRows();
            if (idx.length > 0) {
                apagarHistoricoBtn.setText("Apagar selecionados");
                apagarHistoricoBtn.setEnabled(true);
            } else {
                apagarHistoricoBtn.setText("Apagar");
                apagarHistoricoBtn.setEnabled(false);
            }
        });
        */
    }
    
    final void updateHistoricoTable() {
        updateHistoricoTable(null, 2, 5);
    }
    
    final void updateHistoricoTable(String busca) {
        updateHistoricoTable(busca, 0, 5);
    }
    
    final void updateHistoricoTable(Integer pagina) {
        updateHistoricoTable(null, pagina, 5);
    }
    
    final void updateHistoricoTable(String busca, Integer pagina) {
        updateHistoricoTable(busca, pagina, 10);
    }
    
    final void updateHistoricoTable(String busca, Integer pagina, Integer totalPorPagina) {
        historicoTable.setModel(EmprestimoController.getInstance().ListarArquivo(busca, pagina, totalPorPagina));
        historicoTable.getColumnModel().getColumn(0).setMinWidth(0);
        historicoTable.getColumnModel().getColumn(0).setPreferredWidth(0);
        historicoTable.getColumnModel().getColumn(0).setMaxWidth(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        historicoScrollPane = new javax.swing.JScrollPane();
        historicoTable = new javax.swing.JTable();
        buscaHistoricoField = new javax.swing.JTextField();
        buscaHistoricoBtn = new javax.swing.JButton();
        apagarHistoricoBtn = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Hist√≥rico");

        historicoTable.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        historicoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        historicoTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        historicoTable.getTableHeader().setReorderingAllowed(false);
        historicoScrollPane.setViewportView(historicoTable);

        buscaHistoricoField.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        buscaHistoricoField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                buscaHistoricoFieldKeyPressed(evt);
            }
        });

        buscaHistoricoBtn.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        buscaHistoricoBtn.setText("Buscar");
        buscaHistoricoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaHistoricoBtnActionPerformed(evt);
            }
        });

        apagarHistoricoBtn.setText("Apagar");
        apagarHistoricoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apagarHistoricoBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(historicoScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buscaHistoricoField, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buscaHistoricoBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(apagarHistoricoBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buscaHistoricoBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buscaHistoricoField)
                    .addComponent(apagarHistoricoBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(historicoScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscaHistoricoFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscaHistoricoFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String search = buscaHistoricoField.getText();
            updateHistoricoTable(search);
        }
    }//GEN-LAST:event_buscaHistoricoFieldKeyPressed

    private void buscaHistoricoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaHistoricoBtnActionPerformed
        String search = buscaHistoricoField.getText();
        updateHistoricoTable(search);
    }//GEN-LAST:event_buscaHistoricoBtnActionPerformed

    private void apagarHistoricoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apagarHistoricoBtnActionPerformed
        int idx[] = historicoTable.getSelectedRows();
        if (idx.length > 0) {
            int[] id_emprestimos = new int[idx.length];
            for (int i=0; i<idx.length; i++) {
                id_emprestimos[i] = Integer.valueOf(historicoTable.getValueAt(idx[i], 0).toString());
                
                System.out.println("ID EMPRSTIMO " + id_emprestimos[i]);
            }
        }
    }//GEN-LAST:event_apagarHistoricoBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apagarHistoricoBtn;
    private javax.swing.JButton buscaHistoricoBtn;
    private javax.swing.JTextField buscaHistoricoField;
    private javax.swing.JScrollPane historicoScrollPane;
    private javax.swing.JTable historicoTable;
    // End of variables declaration//GEN-END:variables
}
